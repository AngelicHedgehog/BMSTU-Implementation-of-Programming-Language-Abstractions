/**
    Лексическая грамматика языка регулярок
        в порядке возрастания приоритета доменов:
    t.RegEx ::=
         ()
       | "ε"
       | s.CHAR
       | (t.RegEx)
       | (t.RegEx '*')
       | (t.RegEx "·" t.RegEx)
       | (t.RegEx "⋃" t.RegEx)
*/

$ENTRY Go {
    = <Prout <First ((('a' "⋃" ('a' "·" 'c')) '*') "·" 'b')>>;
}

/**
  <IsIn s.CHAR (s.CHAR*)> == True | False
*/
IsIn {
    e.Element (e.Left e.Element e.Right) = True;
    e.Else = False;
}

/**
  <AddToSet s.CHAR (s.CHAR*)> == s.CHAR*
*/
AddToSet {
    "ε" (e.SetLeft "ε" e.SetRight) =
        e.SetLeft "ε" e.SetRight;
    "ε" (e.Set) = "ε" e.Set;

    s.Element (e.SetLeft s.Element e.SetRight) =
        e.SetLeft s.Element e.SetRight;
    s.Element (e.Set) = s.Element e.Set;
}

/**
  <UnionSets (s.CHAR*) (s.CHAR*)> == s.CHAR*
*/
UnionSets {
    (e.Set) () = e.Set;
    () (e.Set) = e.Set;

    (e.Set1Left s.Set2First e.Set1Right) (s.Set2First e.Set2Other) =
        <UnionSets (e.Set1Left s.Set2First e.Set1Right) (e.Set2Other)>;
    (e.Set1) (s.Set2First e.Set2Other) =
        <UnionSets (e.Set1 s.Set2First) (e.Set2Other)>;
}

/**
  <First t.RegEx> == s.CHAR*
*/
First {
    "∅" = ;
    "ε" = "ε";
    s.RegEx =  s.RegEx;
    (t.RegEx '*') = <AddToSet "ε" (<First t.RegEx>)>;

    (t.RegExL "⋃" t.RegExR) =
        <UnionSets (<First t.RegExL>) (<First t.RegExR>)>;
    (t.RegExL "·" t.RegExR)
        , <First t.RegExL> : e.FirstL
        , <IsIn "ε" (e.FirstL)> : {
            True  = <UnionSets (e.FirstL) (<First t.RegExR>)>;
            False = e.FirstL;
        };
}
