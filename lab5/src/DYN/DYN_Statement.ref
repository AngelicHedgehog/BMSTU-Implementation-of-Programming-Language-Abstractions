*$FROM src/DYN/DYN_Code.ref
*$FROM src/DYN/DYN_Expr.ref
*$FROM src/DYN/DYN_LocalVars.ref
*$FROM src/DYN/DYN_BoolExpr.ref
*$FROM LibraryEx
$EXTERN DYN_Code, DYN_Expr, DYN_LocalVars, DYN_BoolExpr, Map;

/**
  <DYN_Statement
      (t.Expr "=" t.Expr)
    | (call t.Expr t.Expr*)
    | (mcall t.Expr s.Name t.Expr*)
    | (return t.Expr)
    | (if t.BoolExpr e.Code)
    | (if t.BoolExpr e.Code else e.Code)
    | (while t.BoolExpr e.Code)
    | (asm s.ANY+)
    | (block t.LocalVars e.Code)
    | (init t.ObjectPtr s.Name)
    | (t.Expr ":-" t.Expr)
    | (gc-alloc t.Expr s.Name)
    | (ref-return t.Expr)
  > == t.Statement*
*/
$ENTRY DYN_Statement {
  t.LocalRefs (t.ObjectPtr "=" t.Expr) = (<DYN_Expr t.ObjectPtr> "=" <DYN_Expr t.Expr>);
  t.LocalRefs (call t.Expr e.Args) = (call <Map DYN_Expr t.Expr e.Args>);
  t.LocalRefs (mcall t.Object s.Method e.Args) = (mcall <DYN_Expr t.Object> s.Method <Map DYN_Expr e.Args>);
  t.LocalRefs (if t.BoolExpr e.CodeT else e.CodeF)
    = (if <DYN_BoolExpr t.BoolExpr> <DYN_Code t.LocalRefs e.CodeT> else <DYN_Code t.LocalRefs e.CodeF>);
  t.LocalRefs (if t.BoolExpr e.Code) = (if <DYN_BoolExpr t.BoolExpr> <DYN_Code t.LocalRefs e.Code>);
  t.LocalRefs (while t.BoolExpr e.Code) = (while <DYN_BoolExpr t.BoolExpr> <DYN_Code t.LocalRefs e.Code>);
  t.LocalRefs (block t.LocalVars e.Code) = (block <DYN_LocalVars t.LocalVars> <DYN_Code t.LocalRefs e.Code>);
  t.LocalRefs (init t.ObjectPtr s.Name) = (init <DYN_Expr t.ObjectPtr> s.Name);

  (e.LocalRefs) (return t.Expr)
    = (return
        (let ((let_ret__ 1))
          (let_ret__ "=" <DYN_Expr t.Expr>)
          <Map {
            s.LocalRef = (call refDec__ (L s.LocalRef));
          } e.LocalRefs>
          (L let_ret__)
        )
      );

  t.LocalRefs (t.Var ":-" (call e.Args))
  = (block ((blockVar__ 1) (blockAddr__ 1))
      (blockAddr__ "=" <DYN_Expr (call e.Args)>)
      (blockVar__ "=" <DYN_Expr t.Var>)
      (call refDec__ (L (L blockVar__)))
      ((L blockVar__) "=" (L blockAddr__))
    );

  t.LocalRefs (t.Var ":-" t.Addr)
    = (block ((blockVar__ 1) (blockAddr__ 1))
        (blockAddr__ "=" <DYN_Expr t.Addr>)
        (blockVar__ "=" <DYN_Expr t.Var>)
        (call refInc__ (L blockAddr__))
        (call refDec__ (L (L blockVar__)))
        ((L blockVar__) "=" (L blockAddr__))
      );

  t.LocalRefs (gc-alloc t.Expr s.Name)
    = (block ((ref 1))
        (ref "=" <DYN_Expr t.Expr>)
        (call refDec__ (L (L ref)))
        ((L ref) "=" (call allocBlock__ s.Name))
        (((L (L ref)) "-" ref_refs_count__) "=" <Implode_Ext <Explode s.Name> '_refcount__'>)
      );

  (e.LocalRefs) (ref-return t.Expr)
    = (return
        (let ((let_ret__ 1))
          (let_ret__ "=" <DYN_Expr t.Expr>)
          (call refInc__ (L let_ret__))
          <Map {
            s.LocalRef = (call refDec__ (L s.LocalRef));
          } e.LocalRefs>
          (L let_ret__)
        )
      );
  
  t.LocalRefs e.Other = e.Other
}
